AWSTemplateFormatVersion: '2010-09-09'
Description: An automated AMI Creation template with some preconfigured softwares installed in it.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Instance Configuration Properties"
        Parameters:
          - KeyName
          - InstanceType
      -
        Label:
          default: "Additional Parameters"
        Parameters:
          - SSHLocation
    ParameterLabels:
      InstanceType:
        default: "Sample Instance Type for SomeTime"
Mappings:
  RegionMap:
    us-east-1:
      AMALINUX: ami-0de53d8956e8dcf80
    us-east-2:
      AMALINUX: ami-0cd3dfa4e37921605
    us-west-1:
      AMALINUX: ami-0ec6517f6edbf8044
    us-west-2:
      AMALINUX: ami-01e24be29428c15b2
    sa-east-1:
      AMALINUX: ami-05145e0b28ad8e0b2
    ca-central-1:
      AMALINUX: ami-07423fb63ea0a0930
    eu-west-1:
      AMALINUX: ami-08935252a36e25f85
    eu-west-2:
      AMALINUX: ami-01419b804382064e4
    eu-west-3:
      AMALINUX: ami-0dd7e7ed60da8fb83
    eu-central-1:
      AMALINUX: ami-0cfbf4f6db41068ac
    ap-southeast-1:
      AMALINUX: ami-05b3bcf7f311194b3
    ap-southeast-2:
      AMALINUX: ami-02fd0b06f06d93dfc
    ap-northeast-1:
      AMALINUX: ami-00a5245b4816c38e6
    ap-northeast-2:
      AMALINUX: ami-00dc207f8ba6dc919
    ap-south-1:
      AMALINUX: ami-0ad42f4f66f6c1cc9
    cn-north-1:
      AMALINUX: ami-8e6aa0e3
Parameters:
  TestString:
    Type: String
    Default: Hi this is a test page
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: "AWS::EC2::KeyPair::KeyName"
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: can contain only ASCII characters.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: m1.small
    AllowedValues:
    - t2.micro
    - t1.micro
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.xlarge
    - m3.2xlarge
    - c1.medium
    - c1.xlarge
    - cc1.4xlarge
    - cc2.8xlarge
    - cg1.4xlarge
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:

  EC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX]
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SecurityGroupIds:
        - !GetAtt "InstanceSecurityGroup.GroupId"
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2  --configsets ami_creation --region ${AWS::Region}
            yum update -y
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2 --region ${AWS::Region}
            sudo shutdown -h now
    CreationPolicy:
      ResourceSignal:
        Count: "1"
        Timeout: PT5M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ami_creation:
            - "configure_cfn"
            - "install_apache"
            - "install_ssm"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2 --configsets ami_creation --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
            /var/www/html/index.html:
              content: !Ref TestString
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        install_apache:
          packages:
            yum:
              httpd: []
              php: []
              mariadb: []
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
        install_ssm:
          packages:
            yum:
              amazon-ssm-agent: []
          services:
            sysvinit:
              amazon-ssm-agent:
                enabled: "true"
                ensureRunning: "true"
                packages:
                  yum:
                     - amazon-ssm-agent
                files:
                  - /var/log/amazon/ssm/amazon-ssm-agent.log
                  - /var/log/amazon/ssm/error.log
  AMILambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AccessAll
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: '1'
            Effect: Allow
            Action:
            - '*'
            Resource: "*"
  AMI:
    Type: Custom::AMI
    Properties:
      ServiceToken: !GetAtt AMIFunction.Arn
      InstanceId: !Ref EC2
  AMIFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt AMILambdaRole.Arn
      Code:
        ZipFile: !Sub |
          var response = require('cfn-response');
          var AWS = require('aws-sdk');
          exports.handler = function(event, context) {
            console.log("Request received:\n", JSON.stringify(event));
            var physicalId = event.PhysicalResourceId;
            function success(data) {
              return response.send(event, context, response.SUCCESS, data, physicalId);
            }
            function failed(e) {
              return response.send(event, context, response.FAILED, e, physicalId);
            }
            // Call ec2.waitFor, continuing if not finished before Lambda function timeout.
            function wait(waiter) {
              console.log("Waiting: ", JSON.stringify(waiter));
              event.waiter = waiter;
              event.PhysicalResourceId = physicalId;
              var request = ec2.waitFor(waiter.state, waiter.params);
              setTimeout(()=>{
                request.abort();
                console.log("Timeout reached, continuing function. Params:\n", JSON.stringify(event));
                var lambda = new AWS.Lambda();
                lambda.invoke({
                  FunctionName: context.invokedFunctionArn,
                  InvocationType: 'Event',
                  Payload: JSON.stringify(event)
                }).promise().then((data)=>context.done()).catch((err)=>context.fail(err));
              }, context.getRemainingTimeInMillis() - 5000);
              return request.promise().catch((err)=>
                (err.code == 'RequestAbortedError') ?
                  new Promise(()=>context.done()) :
                  Promise.reject(err)
              );
            }
            var ec2 = new AWS.EC2(),
                instanceId = event.ResourceProperties.InstanceId;
            if (event.waiter) {
              wait(event.waiter).then((data)=>success({})).catch((err)=>failed(err));
            } else if (event.RequestType == 'Create' || event.RequestType == 'Update') {
              if (!instanceId) { failed('InstanceID required'); }
              ec2.waitFor('instanceStopped', {InstanceIds: [instanceId]}).promise()
              .then((data)=>
                ec2.createImage({
                  InstanceId: instanceId,
                  Name: event.RequestId
                }).promise()
              ).then((data)=>
                wait({
                  state: 'imageAvailable',
                  params: {ImageIds: [physicalId = data.ImageId]}
                })
              ).then((data)=>success({})).catch((err)=>failed(err));
            } else if (event.RequestType == 'Delete') {
              if (physicalId.indexOf('ami-') !== 0) { return success({});}
              ec2.describeImages({ImageIds: [physicalId]}).promise()
              .then((data)=>
                (data.Images.length == 0) ? success({}) :
                ec2.deregisterImage({ImageId: physicalId}).promise()
              ).then((data)=>
                ec2.describeSnapshots({Filters: [{
                  Name: 'description',
                  Values: ["*" + physicalId + "*"]
                }]}).promise()
              ).then((data)=>
                (data.Snapshots.length === 0) ? success({}) :
                ec2.deleteSnapshot({SnapshotId: data.Snapshots[0].SnapshotId}).promise()
              ).then((data)=>success({})).catch((err)=>failed(err));
            }
          };
      Runtime: nodejs8.10
      Timeout: 300
  InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Enable HTTP access via port 80 and SSH access
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp:
            Ref: SSHLocation
Outputs:
  AMI:
    Value: !Ref AMI
